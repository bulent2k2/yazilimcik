/* Even Fibonacci numbers

 Problem 2
 Each new term in the Fibonacci sequence is generated by adding the previous
 two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not
 exceed four million, find the sum of the even-valued terms.

 */

type Num = BigInt

// definition. but slow and uses much memory, cause it doesn't remember and recompute a lot!
def fib1(n: Int): Num = if (n < 2) n else fib1(n - 1) + fib1(n - 2)

// get the first n+1 fibonacci numbers 
// this one, non-recursive, is much faster and leaner
def fib2(n: Int): Array[Num] = {
    val fib = new Array[Num](n+1)
    fib(0) = 0
    fib(1) = 1
    for (i <- 2 to n) fib(i) = fib(i-1) + fib(i-2)
    fib
}

clearOutput
val test1 = List(1, 2, 3, 5, 8, 13, 21, 34, 55, 89).filter(_ % 2 == 0).sum
assert(test1 == 44)

assert(fib1(34) > 4_000_000)

val z0 = epochTime // şimdiki zamanı (geçmişte bir ana göre) anımsayalım
val qed = (for(i <- 1 to 33) yield(fib1(i))).filter(_ % 2 == 0).sum
println(s"${round(epochTime - z0, 2)} saniye geçti.")
assert(qed == 4613732)

val fibs = fib2(33)
val qed2 = fibs.filter(_ % 2 == 0).sum
assert(qed2 == qed)

// Let's get the first 100 fibonacci numbers using the lean method
val z1 = epochTime
val hundred = fib2(100)
println("First 100 Fibonacci numbers are: " + hundred.take(20).mkString("[", ","," .") + hundred.drop(97).mkString("..",",","]"))
println(s"${round(epochTime - z1, 2)} saniye geçti.")

println("having fun now? Why not?")
